/* XParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. XParser.java */
package com.brentcroft.util.xpath;

import com.brentcroft.util.xpath.ast.AbbrevForwardStep;
import com.brentcroft.util.xpath.ast.AbbrevReverseStep;
import com.brentcroft.util.xpath.ast.AdditiveExpr;
import com.brentcroft.util.xpath.ast.AndExpr;
import com.brentcroft.util.xpath.ast.AnyKindTest;
import com.brentcroft.util.xpath.ast.AxisStep;
import com.brentcroft.util.xpath.ast.CommentTest;
import com.brentcroft.util.xpath.ast.ContextItemExpr;
import com.brentcroft.util.xpath.ast.DecimalLiteral;
import com.brentcroft.util.xpath.ast.EqualityExpr;
import com.brentcroft.util.xpath.ast.FilterExpr;
import com.brentcroft.util.xpath.ast.ForwardAxis;
import com.brentcroft.util.xpath.ast.FunctionCall;
import com.brentcroft.util.xpath.ast.FunctionQName;
import com.brentcroft.util.xpath.ast.IntegerLiteral;
import com.brentcroft.util.xpath.ast.Minus;
import com.brentcroft.util.xpath.ast.MultiplicativeExpr;
import com.brentcroft.util.xpath.ast.NCName;
import com.brentcroft.util.xpath.ast.NCNameColonStar;
import com.brentcroft.util.xpath.ast.NameTest;
import com.brentcroft.util.xpath.ast.NodeTest;
import com.brentcroft.util.xpath.ast.OrExpr;
import com.brentcroft.util.xpath.ast.PITest;
import com.brentcroft.util.xpath.ast.ParenthesizedExpr;
import com.brentcroft.util.xpath.ast.PathExpr;
import com.brentcroft.util.xpath.ast.Predicate;
import com.brentcroft.util.xpath.ast.PredicateList;
import com.brentcroft.util.xpath.ast.QName;
import com.brentcroft.util.xpath.ast.RelationalExpr;
import com.brentcroft.util.xpath.ast.ReverseAxis;
import com.brentcroft.util.xpath.ast.START;
import com.brentcroft.util.xpath.ast.Slash;
import com.brentcroft.util.xpath.ast.SlashSlash;
import com.brentcroft.util.xpath.ast.StringLiteral;
import com.brentcroft.util.xpath.ast.TextTest;
import com.brentcroft.util.xpath.ast.UnaryExpr;
import com.brentcroft.util.xpath.ast.UnionExpr1;
import com.brentcroft.util.xpath.ast.VarName;
import com.brentcroft.util.xpath.ast.Wildcard;
import java.util.ArrayList;
import java.util.EmptyStackException;
import java.util.Iterator;
import java.util.List;
import java.util.Stack;

public class XParser/*@bgen(jjtree)*/ implements XParserTreeConstants, XParserConstants
{/*@bgen(jjtree)*/
    protected JJTXParserState jjtree = new JJTXParserState();
    boolean isStep = false;

    Stack _elementStack = new Stack();

    Stack binaryTokenStack = new Stack();

    public Node createNode( int id )
    {
        return null;
    }

    void processToken( SimpleNode n, Token t )
    {
        if ( t.kind == XParserConstants.Slash && n.id != XParserTreeConstants.JJTSLASH )
        {
            return;
        }

        n.processToken( t );
    }

    final public START START() throws ParseException
    {/*@bgen(jjtree) START */
        START jjtn000 = new START( this, JJTSTART );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            ExprSingle();
            jj_consume_token( 0 );
            jjtree.closeNodeScope( jjtn000, true );
            jjtc000 = false;
            if ( this.token_source.curLexState == XParserConstants.EXPR_COMMENT )
            {
                if ( true )
                {
                    throw new ParseException( "Unterminated comment." );
                }
            }
            {
                if ( "" != null )
                {
                    return jjtn000;
                }
            }
        }
        catch ( Throwable jjte000 )
        {
            if ( jjtc000 )
            {
                jjtree.clearNodeScope( jjtn000 );
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException )
            {
                {
                    if ( true )
                    {
                        throw ( RuntimeException ) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException )
            {
                {
                    if ( true )
                    {
                        throw ( ParseException ) jjte000;
                    }
                }
            }
            {
                if ( true )
                {
                    throw ( Error ) jjte000;
                }
            }
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, true );
            }
        }
        throw new Error( "Missing return statement in function" );
    }

    final public void ExprSingle() throws ParseException
    {
        OrExpr();
    }

    final public void OperatorExpr() throws ParseException
    {
        OrExpr();
    }

    final public void OrExpr() throws ParseException
    {/*@bgen(jjtree) #OrExpr(> 1) */
        OrExpr jjtn000 = new OrExpr( this, JJTOREXPR );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            AndExpr();
            label_1:
            while ( true )
            {
                switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case 1:
                    {
                        ;
                        break;
                    }
                    default:
                        jj_la1[ 0 ] = jj_gen;
                        break label_1;
                }
                jj_consume_token( 1 );
                binaryTokenStack.push( token );
                AndExpr();
                OrExpr jjtn001 = new OrExpr( this, JJTOREXPR );
                boolean jjtc001 = true;
                jjtree.openNodeScope( jjtn001 );
                try
                {
                    jjtree.closeNodeScope( jjtn001, 2 );
                    jjtc001 = false;
                    try
                    {
                        processToken( jjtn001, ( Token ) binaryTokenStack.pop() );
                    }
                    catch ( EmptyStackException e )
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        {
                            if ( true )
                            {
                                throw e;
                            }
                        }
                    }
                }
                finally
                {
                    if ( jjtc001 )
                    {
                        jjtree.closeNodeScope( jjtn001, 2 );
                    }
                }
            }
        }
        catch ( Throwable jjte000 )
        {
            if ( jjtc000 )
            {
                jjtree.clearNodeScope( jjtn000 );
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException )
            {
                {
                    if ( true )
                    {
                        throw ( RuntimeException ) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException )
            {
                {
                    if ( true )
                    {
                        throw ( ParseException ) jjte000;
                    }
                }
            }
            {
                if ( true )
                {
                    throw ( Error ) jjte000;
                }
            }
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, jjtree.nodeArity() > 1 );
            }
        }
    }

    final public void AndExpr() throws ParseException
    {/*@bgen(jjtree) #AndExpr(> 1) */
        AndExpr jjtn000 = new AndExpr( this, JJTANDEXPR );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            EqualityExpr();
            label_2:
            while ( true )
            {
                switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case 2:
                    {
                        ;
                        break;
                    }
                    default:
                        jj_la1[ 1 ] = jj_gen;
                        break label_2;
                }
                jj_consume_token( 2 );
                binaryTokenStack.push( token );
                EqualityExpr();
                AndExpr jjtn001 = new AndExpr( this, JJTANDEXPR );
                boolean jjtc001 = true;
                jjtree.openNodeScope( jjtn001 );
                try
                {
                    jjtree.closeNodeScope( jjtn001, 2 );
                    jjtc001 = false;
                    try
                    {
                        processToken( jjtn001, ( Token ) binaryTokenStack.pop() );
                    }
                    catch ( EmptyStackException e )
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        {
                            if ( true )
                            {
                                throw e;
                            }
                        }
                    }
                }
                finally
                {
                    if ( jjtc001 )
                    {
                        jjtree.closeNodeScope( jjtn001, 2 );
                    }
                }
            }
        }
        catch ( Throwable jjte000 )
        {
            if ( jjtc000 )
            {
                jjtree.clearNodeScope( jjtn000 );
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException )
            {
                {
                    if ( true )
                    {
                        throw ( RuntimeException ) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException )
            {
                {
                    if ( true )
                    {
                        throw ( ParseException ) jjte000;
                    }
                }
            }
            {
                if ( true )
                {
                    throw ( Error ) jjte000;
                }
            }
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, jjtree.nodeArity() > 1 );
            }
        }
    }

    final public void EqualityExpr() throws ParseException
    {/*@bgen(jjtree) EqualityExpr */
        EqualityExpr jjtn000 = new EqualityExpr( this, JJTEQUALITYEXPR );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            RelationalExpr();
            label_3:
            while ( true )
            {
                switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case 3:
                    case 4:
                    {
                        ;
                        break;
                    }
                    default:
                        jj_la1[ 2 ] = jj_gen;
                        break label_3;
                }
                switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case 3:
                    {
                        jj_consume_token( 3 );
                        binaryTokenStack.push( token );
                        break;
                    }
                    case 4:
                    {
                        jj_consume_token( 4 );
                        binaryTokenStack.push( token );
                        break;
                    }
                    default:
                        jj_la1[ 3 ] = jj_gen;
                        jj_consume_token( - 1 );
                        throw new ParseException();
                }
                RelationalExpr();
                EqualityExpr jjtn001 = new EqualityExpr( this, JJTEQUALITYEXPR );
                boolean jjtc001 = true;
                jjtree.openNodeScope( jjtn001 );
                try
                {
                    jjtree.closeNodeScope( jjtn001, 2 );
                    jjtc001 = false;
                    try
                    {
                        processToken( jjtn001, ( Token ) binaryTokenStack.pop() );
                    }
                    catch ( EmptyStackException e )
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        {
                            if ( true )
                            {
                                throw e;
                            }
                        }
                    }
                }
                finally
                {
                    if ( jjtc001 )
                    {
                        jjtree.closeNodeScope( jjtn001, 2 );
                    }
                }
            }
        }
        catch ( Throwable jjte000 )
        {
            if ( jjtc000 )
            {
                jjtree.clearNodeScope( jjtn000 );
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException )
            {
                {
                    if ( true )
                    {
                        throw ( RuntimeException ) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException )
            {
                {
                    if ( true )
                    {
                        throw ( ParseException ) jjte000;
                    }
                }
            }
            {
                if ( true )
                {
                    throw ( Error ) jjte000;
                }
            }
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, true );
            }
        }
    }

    final public void RelationalExpr() throws ParseException
    {/*@bgen(jjtree) RelationalExpr */
        RelationalExpr jjtn000 = new RelationalExpr( this, JJTRELATIONALEXPR );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            AdditiveExpr();
            label_4:
            while ( true )
            {
                switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case 5:
                    case 6:
                    case 7:
                    case LeftAngleBracket:
                    {
                        ;
                        break;
                    }
                    default:
                        jj_la1[ 4 ] = jj_gen;
                        break label_4;
                }
                switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case LeftAngleBracket:
                    {
                        jj_consume_token( LeftAngleBracket );
/* Careful! */
                        token_source.SwitchTo( DEFAULT );
                        token_source.stateStack.pop();
                        binaryTokenStack.push( token );
                        break;
                    }
                    case 5:
                    {
                        jj_consume_token( 5 );
                        binaryTokenStack.push( token );
                        break;
                    }
                    case 6:
                    {
                        jj_consume_token( 6 );
                        binaryTokenStack.push( token );
                        break;
                    }
                    case 7:
                    {
                        jj_consume_token( 7 );
                        binaryTokenStack.push( token );
                        break;
                    }
                    default:
                        jj_la1[ 5 ] = jj_gen;
                        jj_consume_token( - 1 );
                        throw new ParseException();
                }
                AdditiveExpr();
                RelationalExpr jjtn001 = new RelationalExpr( this, JJTRELATIONALEXPR );
                boolean jjtc001 = true;
                jjtree.openNodeScope( jjtn001 );
                try
                {
                    jjtree.closeNodeScope( jjtn001, 2 );
                    jjtc001 = false;
                    try
                    {
                        processToken( jjtn001, ( Token ) binaryTokenStack.pop() );
                    }
                    catch ( EmptyStackException e )
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        {
                            if ( true )
                            {
                                throw e;
                            }
                        }
                    }
                }
                finally
                {
                    if ( jjtc001 )
                    {
                        jjtree.closeNodeScope( jjtn001, 2 );
                    }
                }
            }
        }
        catch ( Throwable jjte000 )
        {
            if ( jjtc000 )
            {
                jjtree.clearNodeScope( jjtn000 );
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException )
            {
                {
                    if ( true )
                    {
                        throw ( RuntimeException ) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException )
            {
                {
                    if ( true )
                    {
                        throw ( ParseException ) jjte000;
                    }
                }
            }
            {
                if ( true )
                {
                    throw ( Error ) jjte000;
                }
            }
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, true );
            }
        }
    }

    final public void AdditiveExpr() throws ParseException
    {/*@bgen(jjtree) #AdditiveExpr(> 1) */
        AdditiveExpr jjtn000 = new AdditiveExpr( this, JJTADDITIVEEXPR );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            MultiplicativeExpr();
            label_5:
            while ( true )
            {
                switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case Plus:
                    case Minus:
                    {
                        ;
                        break;
                    }
                    default:
                        jj_la1[ 6 ] = jj_gen;
                        break label_5;
                }
                switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case Plus:
                    {
                        jj_consume_token( Plus );
                        binaryTokenStack.push( token );
                        break;
                    }
                    case Minus:
                    {
                        jj_consume_token( Minus );
                        binaryTokenStack.push( token );
                        break;
                    }
                    default:
                        jj_la1[ 7 ] = jj_gen;
                        jj_consume_token( - 1 );
                        throw new ParseException();
                }
                MultiplicativeExpr();
                AdditiveExpr jjtn001 = new AdditiveExpr( this, JJTADDITIVEEXPR );
                boolean jjtc001 = true;
                jjtree.openNodeScope( jjtn001 );
                try
                {
                    jjtree.closeNodeScope( jjtn001, 2 );
                    jjtc001 = false;
                    try
                    {
                        processToken( jjtn001, ( Token ) binaryTokenStack.pop() );
                    }
                    catch ( EmptyStackException e )
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        {
                            if ( true )
                            {
                                throw e;
                            }
                        }
                    }
                }
                finally
                {
                    if ( jjtc001 )
                    {
                        jjtree.closeNodeScope( jjtn001, 2 );
                    }
                }
            }
        }
        catch ( Throwable jjte000 )
        {
            if ( jjtc000 )
            {
                jjtree.clearNodeScope( jjtn000 );
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException )
            {
                {
                    if ( true )
                    {
                        throw ( RuntimeException ) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException )
            {
                {
                    if ( true )
                    {
                        throw ( ParseException ) jjte000;
                    }
                }
            }
            {
                if ( true )
                {
                    throw ( Error ) jjte000;
                }
            }
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, jjtree.nodeArity() > 1 );
            }
        }
    }

    final public void MultiplicativeExpr() throws ParseException
    {/*@bgen(jjtree) #MultiplicativeExpr(> 1) */
        MultiplicativeExpr jjtn000 = new MultiplicativeExpr( this, JJTMULTIPLICATIVEEXPR );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            UnaryExpr();
            label_6:
            while ( true )
            {
                switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case 8:
                    case 9:
                    case 10:
                    {
                        ;
                        break;
                    }
                    default:
                        jj_la1[ 8 ] = jj_gen;
                        break label_6;
                }
                switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case 8:
                    {
                        jj_consume_token( 8 );
                        binaryTokenStack.push( token );
                        break;
                    }
                    case 9:
                    {
                        jj_consume_token( 9 );
                        binaryTokenStack.push( token );
                        break;
                    }
                    case 10:
                    {
                        jj_consume_token( 10 );
                        binaryTokenStack.push( token );
                        break;
                    }
                    default:
                        jj_la1[ 9 ] = jj_gen;
                        jj_consume_token( - 1 );
                        throw new ParseException();
                }
                UnaryExpr();
                MultiplicativeExpr jjtn001 = new MultiplicativeExpr( this, JJTMULTIPLICATIVEEXPR );
                boolean jjtc001 = true;
                jjtree.openNodeScope( jjtn001 );
                try
                {
                    jjtree.closeNodeScope( jjtn001, 2 );
                    jjtc001 = false;
                    try
                    {
                        processToken( jjtn001, ( Token ) binaryTokenStack.pop() );
                    }
                    catch ( EmptyStackException e )
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        {
                            if ( true )
                            {
                                throw e;
                            }
                        }
                    }
                }
                finally
                {
                    if ( jjtc001 )
                    {
                        jjtree.closeNodeScope( jjtn001, 2 );
                    }
                }
            }
        }
        catch ( Throwable jjte000 )
        {
            if ( jjtc000 )
            {
                jjtree.clearNodeScope( jjtn000 );
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException )
            {
                {
                    if ( true )
                    {
                        throw ( RuntimeException ) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException )
            {
                {
                    if ( true )
                    {
                        throw ( ParseException ) jjte000;
                    }
                }
            }
            {
                if ( true )
                {
                    throw ( Error ) jjte000;
                }
            }
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, jjtree.nodeArity() > 1 );
            }
        }
    }

    final public void UnaryExpr() throws ParseException
    {/*@bgen(jjtree) #UnaryExpr( keepUnary) */
        UnaryExpr jjtn000 = new UnaryExpr( this, JJTUNARYEXPR );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        boolean keepUnary = false;
        try
        {
            label_7:
            while ( true )
            {
                switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case Minus:
                    {
                        ;
                        break;
                    }
                    default:
                        jj_la1[ 10 ] = jj_gen;
                        break label_7;
                }
                jj_consume_token( Minus );
                com.brentcroft.util.xpath.ast.Minus jjtn001 = new Minus( this, JJTMINUS );
                boolean jjtc001 = true;
                jjtree.openNodeScope( jjtn001 );
                try
                {
                    jjtree.closeNodeScope( jjtn001, true );
                    jjtc001 = false;
                    keepUnary = true;
                    processToken( jjtn001, token );
                }
                finally
                {
                    if ( jjtc001 )
                    {
                        jjtree.closeNodeScope( jjtn001, true );
                    }
                }
            }
            UnionExpr1();
        }
        catch ( Throwable jjte000 )
        {
            if ( jjtc000 )
            {
                jjtree.clearNodeScope( jjtn000 );
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException )
            {
                {
                    if ( true )
                    {
                        throw ( RuntimeException ) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException )
            {
                {
                    if ( true )
                    {
                        throw ( ParseException ) jjte000;
                    }
                }
            }
            {
                if ( true )
                {
                    throw ( Error ) jjte000;
                }
            }
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, keepUnary );
            }
        }
    }

    final public void UnionExpr1() throws ParseException
    {/*@bgen(jjtree) UnionExpr1 */
        UnionExpr1 jjtn000 = new UnionExpr1( this, JJTUNIONEXPR1 );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            ValueExpr();
            label_8:
            while ( true )
            {
                switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case 11:
                    {
                        ;
                        break;
                    }
                    default:
                        jj_la1[ 11 ] = jj_gen;
                        break label_8;
                }
                jj_consume_token( 11 );
                binaryTokenStack.push( token );
                ValueExpr();
                UnionExpr1 jjtn001 = new UnionExpr1( this, JJTUNIONEXPR1 );
                boolean jjtc001 = true;
                jjtree.openNodeScope( jjtn001 );
                try
                {
                    jjtree.closeNodeScope( jjtn001, 2 );
                    jjtc001 = false;
                    try
                    {
                        processToken( jjtn001, ( Token ) binaryTokenStack.pop() );
                    }
                    catch ( EmptyStackException e )
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        {
                            if ( true )
                            {
                                throw e;
                            }
                        }
                    }
                }
                finally
                {
                    if ( jjtc001 )
                    {
                        jjtree.closeNodeScope( jjtn001, 2 );
                    }
                }
            }
        }
        catch ( Throwable jjte000 )
        {
            if ( jjtc000 )
            {
                jjtree.clearNodeScope( jjtn000 );
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException )
            {
                {
                    if ( true )
                    {
                        throw ( RuntimeException ) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException )
            {
                {
                    if ( true )
                    {
                        throw ( ParseException ) jjte000;
                    }
                }
            }
            {
                if ( true )
                {
                    throw ( Error ) jjte000;
                }
            }
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, true );
            }
        }
    }

    final public void ValueExpr() throws ParseException
    {
        if ( jj_2_1( 2 ) )
        {
            FilterExpr();
            switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
            {
                case Slash:
                case SlashSlash:
                {
                    switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
                    {
                        case Slash:
                        {
                            jj_consume_token( Slash );
                            com.brentcroft.util.xpath.ast.Slash jjtn001 = new Slash( this, JJTSLASH );
                            boolean jjtc001 = true;
                            jjtree.openNodeScope( jjtn001 );
                            try
                            {
                                jjtree.closeNodeScope( jjtn001, true );
                                jjtc001 = false;
                                processToken( jjtn001, token );
                            }
                            finally
                            {
                                if ( jjtc001 )
                                {
                                    jjtree.closeNodeScope( jjtn001, true );
                                }
                            }
                            break;
                        }
                        case SlashSlash:
                        {
                            jj_consume_token( SlashSlash );
                            com.brentcroft.util.xpath.ast.SlashSlash jjtn002 = new SlashSlash( this, JJTSLASHSLASH );
                            boolean jjtc002 = true;
                            jjtree.openNodeScope( jjtn002 );
                            try
                            {
                                jjtree.closeNodeScope( jjtn002, true );
                                jjtc002 = false;
                                processToken( jjtn002, token );
                            }
                            finally
                            {
                                if ( jjtc002 )
                                {
                                    jjtree.closeNodeScope( jjtn002, true );
                                }
                            }
                            break;
                        }
                        default:
                            jj_la1[ 12 ] = jj_gen;
                            jj_consume_token( - 1 );
                            throw new ParseException();
                    }
                    RelativePathExpr();
                    break;
                }
                default:
                    jj_la1[ 13 ] = jj_gen;
                    ;
            }
        }
        else
        {
            switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
            {
                case 1:
                case 2:
                case 8:
                case 9:
                case 10:
                case 12:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 33:
                case 35:
                case 36:
                case 37:
                case 38:
                case Slash:
                case SlashSlash:
                case NCNameColonStar:
                case QNameToken:
                {
                    PathExpr();
                    break;
                }
                default:
                    jj_la1[ 14 ] = jj_gen;
                    jj_consume_token( - 1 );
                    throw new ParseException();
            }
        }
    }

    final public void PathExpr() throws ParseException
    {/*@bgen(jjtree) PathExpr */
        PathExpr jjtn000 = new PathExpr( this, JJTPATHEXPR );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
            {
                case Slash:
                {
                    jj_consume_token( Slash );
                    Slash jjtn001 = new Slash( this, JJTSLASH );
                    boolean jjtc001 = true;
                    jjtree.openNodeScope( jjtn001 );
                    try
                    {
                        jjtree.closeNodeScope( jjtn001, true );
                        jjtc001 = false;
                        processToken( jjtn001, token );
                    }
                    finally
                    {
                        if ( jjtc001 )
                        {
                            jjtree.closeNodeScope( jjtn001, true );
                        }
                    }
                    switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
                    {
                        case 1:
                        case 2:
                        case 8:
                        case 9:
                        case 10:
                        case 12:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        case 33:
                        case 35:
                        case 36:
                        case 37:
                        case 38:
                        case NCNameColonStar:
                        case QNameToken:
                        {
                            RelativePathExpr();
                            break;
                        }
                        default:
                            jj_la1[ 15 ] = jj_gen;
                            ;
                    }
                    break;
                }
                case SlashSlash:
                {
                    jj_consume_token( SlashSlash );
                    SlashSlash jjtn002 = new SlashSlash( this, JJTSLASHSLASH );
                    boolean jjtc002 = true;
                    jjtree.openNodeScope( jjtn002 );
                    try
                    {
                        jjtree.closeNodeScope( jjtn002, true );
                        jjtc002 = false;
                        processToken( jjtn002, token );
                    }
                    finally
                    {
                        if ( jjtc002 )
                        {
                            jjtree.closeNodeScope( jjtn002, true );
                        }
                    }
                    RelativePathExpr();
                    break;
                }
                case 1:
                case 2:
                case 8:
                case 9:
                case 10:
                case 12:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 33:
                case 35:
                case 36:
                case 37:
                case 38:
                case NCNameColonStar:
                case QNameToken:
                {
                    RelativePathExpr();
                    break;
                }
                default:
                    jj_la1[ 16 ] = jj_gen;
                    jj_consume_token( - 1 );
                    throw new ParseException();
            }
        }
        catch ( Throwable jjte000 )
        {
            if ( jjtc000 )
            {
                jjtree.clearNodeScope( jjtn000 );
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException )
            {
                {
                    if ( true )
                    {
                        throw ( RuntimeException ) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException )
            {
                {
                    if ( true )
                    {
                        throw ( ParseException ) jjte000;
                    }
                }
            }
            {
                if ( true )
                {
                    throw ( Error ) jjte000;
                }
            }
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, true );
            }
        }
    }

    final public void RelativePathExpr() throws ParseException
    {
        StepExpr();
        label_9:
        while ( true )
        {
            switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
            {
                case Slash:
                case SlashSlash:
                {
                    ;
                    break;
                }
                default:
                    jj_la1[ 17 ] = jj_gen;
                    break label_9;
            }
            switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
            {
                case Slash:
                {
                    jj_consume_token( Slash );
                    Slash jjtn001 = new Slash( this, JJTSLASH );
                    boolean jjtc001 = true;
                    jjtree.openNodeScope( jjtn001 );
                    try
                    {
                        jjtree.closeNodeScope( jjtn001, true );
                        jjtc001 = false;
                        processToken( jjtn001, token );
                    }
                    finally
                    {
                        if ( jjtc001 )
                        {
                            jjtree.closeNodeScope( jjtn001, true );
                        }
                    }
                    break;
                }
                case SlashSlash:
                {
                    jj_consume_token( SlashSlash );
                    SlashSlash jjtn002 = new SlashSlash( this, JJTSLASHSLASH );
                    boolean jjtc002 = true;
                    jjtree.openNodeScope( jjtn002 );
                    try
                    {
                        jjtree.closeNodeScope( jjtn002, true );
                        jjtc002 = false;
                        processToken( jjtn002, token );
                    }
                    finally
                    {
                        if ( jjtc002 )
                        {
                            jjtree.closeNodeScope( jjtn002, true );
                        }
                    }
                    break;
                }
                default:
                    jj_la1[ 18 ] = jj_gen;
                    jj_consume_token( - 1 );
                    throw new ParseException();
            }
            StepExpr();
        }
    }

    final public void StepExpr() throws ParseException
    {
        switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
        {
            case 1:
            case 2:
            case 8:
            case 9:
            case 10:
            case 12:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 35:
            case 36:
            case 37:
            case 38:
            case NCNameColonStar:
            case QNameToken:
            {
                AxisStep();
                break;
            }
            case 33:
            {
                ContextItemExpr();
                break;
            }
            case 27:
            {
                AbbrevReverseStep();
                break;
            }
            default:
                jj_la1[ 19 ] = jj_gen;
                jj_consume_token( - 1 );
                throw new ParseException();
        }
    }

    final public void AxisStep() throws ParseException
    {/*@bgen(jjtree) AxisStep */
        AxisStep jjtn000 = new AxisStep( this, JJTAXISSTEP );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            if ( jj_2_2( 2 ) )
            {
                ReverseStep();
            }
            else
            {
                switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case 1:
                    case 2:
                    case 8:
                    case 9:
                    case 10:
                    case 12:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case NCNameColonStar:
                    case QNameToken:
                    {
                        ForwardStep();
                        break;
                    }
                    default:
                        jj_la1[ 20 ] = jj_gen;
                        jj_consume_token( - 1 );
                        throw new ParseException();
                }
            }
            PredicateList();
        }
        catch ( Throwable jjte000 )
        {
            if ( jjtc000 )
            {
                jjtree.clearNodeScope( jjtn000 );
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException )
            {
                {
                    if ( true )
                    {
                        throw ( RuntimeException ) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException )
            {
                {
                    if ( true )
                    {
                        throw ( ParseException ) jjte000;
                    }
                }
            }
            {
                if ( true )
                {
                    throw ( Error ) jjte000;
                }
            }
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, true );
            }
        }
    }

    final public void ForwardStep() throws ParseException
    {
        if ( jj_2_3( 2 ) )
        {
            ForwardAxis();
            NodeTest();
        }
        else
        {
            switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
            {
                case 1:
                case 2:
                case 8:
                case 9:
                case 10:
                case 12:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 35:
                case 36:
                case 37:
                case 38:
                case NCNameColonStar:
                case QNameToken:
                {
                    AbbrevForwardStep();
                    break;
                }
                default:
                    jj_la1[ 21 ] = jj_gen;
                    jj_consume_token( - 1 );
                    throw new ParseException();
            }
        }
    }

    final public void ForwardAxis() throws ParseException
    {/*@bgen(jjtree) ForwardAxis */
        ForwardAxis jjtn000 = new ForwardAxis( this, JJTFORWARDAXIS );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
            {
                case 12:
                {
                    jj_consume_token( 12 );
                    jjtn000.processValue( "child::" );
                    jj_consume_token( 13 );
                    break;
                }
                case 14:
                {
                    jj_consume_token( 14 );
                    jjtn000.processValue( "descendant::" );
                    jj_consume_token( 13 );
                    break;
                }
                case 15:
                {
                    jj_consume_token( 15 );
                    jjtn000.processValue( "attribute::" );
                    jj_consume_token( 13 );
                    break;
                }
                case 16:
                {
                    jj_consume_token( 16 );
                    jjtn000.processValue( "self::" );
                    jj_consume_token( 13 );
                    break;
                }
                case 17:
                {
                    jj_consume_token( 17 );
                    jjtn000.processValue( "descendant-or-self::" );
                    jj_consume_token( 13 );
                    break;
                }
                case 18:
                {
                    jj_consume_token( 18 );
                    jjtn000.processValue( "following-sibling::" );
                    jj_consume_token( 13 );
                    break;
                }
                case 19:
                {
                    jj_consume_token( 19 );
                    jjtn000.processValue( "following::" );
                    jj_consume_token( 13 );
                    break;
                }
                case 20:
                {
                    jj_consume_token( 20 );
                    jjtn000.processValue( "namespace::" );
                    jj_consume_token( 13 );
                    break;
                }
                default:
                    jj_la1[ 22 ] = jj_gen;
                    jj_consume_token( - 1 );
                    throw new ParseException();
            }
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, true );
            }
        }
    }

    final public void AbbrevForwardStep() throws ParseException
    {/*@bgen(jjtree) AbbrevForwardStep */
        AbbrevForwardStep jjtn000 = new AbbrevForwardStep( this, JJTABBREVFORWARDSTEP );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
            {
                case 21:
                {
                    jj_consume_token( 21 );
                    jjtn000.processValue( "@" );
                    break;
                }
                default:
                    jj_la1[ 23 ] = jj_gen;
                    ;
            }
            NodeTest();
        }
        catch ( Throwable jjte000 )
        {
            if ( jjtc000 )
            {
                jjtree.clearNodeScope( jjtn000 );
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException )
            {
                {
                    if ( true )
                    {
                        throw ( RuntimeException ) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException )
            {
                {
                    if ( true )
                    {
                        throw ( ParseException ) jjte000;
                    }
                }
            }
            {
                if ( true )
                {
                    throw ( Error ) jjte000;
                }
            }
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, true );
            }
        }
    }

    final public void ReverseStep() throws ParseException
    {
        ReverseAxis();
        NodeTest();
    }

    final public void ReverseAxis() throws ParseException
    {/*@bgen(jjtree) ReverseAxis */
        ReverseAxis jjtn000 = new ReverseAxis( this, JJTREVERSEAXIS );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
            {
                case 22:
                {
                    jj_consume_token( 22 );
                    jjtn000.processValue( "parent::" );
                    jj_consume_token( 13 );
                    break;
                }
                case 23:
                {
                    jj_consume_token( 23 );
                    jjtn000.processValue( "ancestor::" );
                    jj_consume_token( 13 );
                    break;
                }
                case 24:
                {
                    jj_consume_token( 24 );
                    jjtn000.processValue( "preceding-sibling::" );
                    jj_consume_token( 13 );
                    break;
                }
                case 25:
                {
                    jj_consume_token( 25 );
                    jjtn000.processValue( "preceding::" );
                    jj_consume_token( 13 );
                    break;
                }
                case 26:
                {
                    jj_consume_token( 26 );
                    jjtn000.processValue( "ancestor-or-self::" );
                    jj_consume_token( 13 );
                    break;
                }
                default:
                    jj_la1[ 24 ] = jj_gen;
                    jj_consume_token( - 1 );
                    throw new ParseException();
            }
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, true );
            }
        }
    }

    final public void AbbrevReverseStep() throws ParseException
    {/*@bgen(jjtree) AbbrevReverseStep */
        AbbrevReverseStep jjtn000 = new AbbrevReverseStep( this, JJTABBREVREVERSESTEP );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            jj_consume_token( 27 );
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, true );
            }
        }
    }

    final public void NodeTest() throws ParseException
    {/*@bgen(jjtree) NodeTest */
        NodeTest jjtn000 = new NodeTest( this, JJTNODETEST );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            if ( jj_2_4( 2 ) )
            {
                KindTest();
            }
            else
            {
                switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case 1:
                    case 2:
                    case 8:
                    case 9:
                    case 10:
                    case 12:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case NCNameColonStar:
                    case QNameToken:
                    {
                        NameTest();
                        break;
                    }
                    default:
                        jj_la1[ 25 ] = jj_gen;
                        jj_consume_token( - 1 );
                        throw new ParseException();
                }
            }
        }
        catch ( Throwable jjte000 )
        {
            if ( jjtc000 )
            {
                jjtree.clearNodeScope( jjtn000 );
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException )
            {
                {
                    if ( true )
                    {
                        throw ( RuntimeException ) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException )
            {
                {
                    if ( true )
                    {
                        throw ( ParseException ) jjte000;
                    }
                }
            }
            {
                if ( true )
                {
                    throw ( Error ) jjte000;
                }
            }
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, true );
            }
        }
    }

    final public void NameTest() throws ParseException
    {/*@bgen(jjtree) NameTest */
        NameTest jjtn000 = new NameTest( this, JJTNAMETEST );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
            {
                case 1:
                case 2:
                case 9:
                case 10:
                case 12:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 35:
                case 36:
                case 37:
                case 38:
                case QNameToken:
                {
                    QName();
                    break;
                }
                case 8:
                case NCNameColonStar:
                {
                    Wildcard();
                    break;
                }
                default:
                    jj_la1[ 26 ] = jj_gen;
                    jj_consume_token( - 1 );
                    throw new ParseException();
            }
        }
        catch ( Throwable jjte000 )
        {
            if ( jjtc000 )
            {
                jjtree.clearNodeScope( jjtn000 );
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException )
            {
                {
                    if ( true )
                    {
                        throw ( RuntimeException ) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException )
            {
                {
                    if ( true )
                    {
                        throw ( ParseException ) jjte000;
                    }
                }
            }
            {
                if ( true )
                {
                    throw ( Error ) jjte000;
                }
            }
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, true );
            }
        }
    }

    final public void Wildcard() throws ParseException
    {/*@bgen(jjtree) Wildcard */
        Wildcard jjtn000 = new Wildcard( this, JJTWILDCARD );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
            {
                case 8:
                {
                    jj_consume_token( 8 );
                    jjtree.closeNodeScope( jjtn000, true );
                    jjtc000 = false;
                    jjtn000.processValue( "*" );
                    break;
                }
                case NCNameColonStar:
                {
                    jj_consume_token( NCNameColonStar );
                    com.brentcroft.util.xpath.ast.NCNameColonStar jjtn001 = new NCNameColonStar( this, JJTNCNAMECOLONSTAR );
                    boolean jjtc001 = true;
                    jjtree.openNodeScope( jjtn001 );
                    try
                    {
                        jjtree.closeNodeScope( jjtn001, true );
                        jjtc001 = false;
                        processToken( jjtn001, token );
                    }
                    finally
                    {
                        if ( jjtc001 )
                        {
                            jjtree.closeNodeScope( jjtn001, true );
                        }
                    }
                    break;
                }
                default:
                    jj_la1[ 27 ] = jj_gen;
                    jj_consume_token( - 1 );
                    throw new ParseException();
            }
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, true );
            }
        }
    }

    final public void FilterExpr() throws ParseException
    {/*@bgen(jjtree) FilterExpr */
        FilterExpr jjtn000 = new FilterExpr( this, JJTFILTEREXPR );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            PrimaryExpr();
            PredicateList();
        }
        catch ( Throwable jjte000 )
        {
            if ( jjtc000 )
            {
                jjtree.clearNodeScope( jjtn000 );
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException )
            {
                {
                    if ( true )
                    {
                        throw ( RuntimeException ) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException )
            {
                {
                    if ( true )
                    {
                        throw ( ParseException ) jjte000;
                    }
                }
            }
            {
                if ( true )
                {
                    throw ( Error ) jjte000;
                }
            }
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, true );
            }
        }
    }

    final public void PredicateList() throws ParseException
    {/*@bgen(jjtree) #PredicateList(> 0) */
        PredicateList jjtn000 = new PredicateList( this, JJTPREDICATELIST );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            label_10:
            while ( true )
            {
                switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
                {
                    case 28:
                    {
                        ;
                        break;
                    }
                    default:
                        jj_la1[ 28 ] = jj_gen;
                        break label_10;
                }
                Predicate();
            }
        }
        catch ( Throwable jjte000 )
        {
            if ( jjtc000 )
            {
                jjtree.clearNodeScope( jjtn000 );
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException )
            {
                {
                    if ( true )
                    {
                        throw ( RuntimeException ) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException )
            {
                {
                    if ( true )
                    {
                        throw ( ParseException ) jjte000;
                    }
                }
            }
            {
                if ( true )
                {
                    throw ( Error ) jjte000;
                }
            }
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, jjtree.nodeArity() > 0 );
            }
        }
    }

    final public void Predicate() throws ParseException
    {/*@bgen(jjtree) Predicate */
        Predicate jjtn000 = new Predicate( this, JJTPREDICATE );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            jj_consume_token( 28 );
            ExprSingle();
            jj_consume_token( 29 );
        }
        catch ( Throwable jjte000 )
        {
            if ( jjtc000 )
            {
                jjtree.clearNodeScope( jjtn000 );
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException )
            {
                {
                    if ( true )
                    {
                        throw ( RuntimeException ) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException )
            {
                {
                    if ( true )
                    {
                        throw ( ParseException ) jjte000;
                    }
                }
            }
            {
                if ( true )
                {
                    throw ( Error ) jjte000;
                }
            }
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, true );
            }
        }
    }

    final public void PrimaryExpr() throws ParseException
    {
        switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
        {
            case IntegerLiteral:
            case DecimalLiteral:
            case StringLiteral:
            {
                Literal();
                break;
            }
            case 30:
            {
                VarRef();
                break;
            }
            case 31:
            {
                ParenthesizedExpr();
                break;
            }
            default:
                jj_la1[ 29 ] = jj_gen;
                if ( jj_2_5( 2 ) )
                {
                    FunctionCall();
                }
                else
                {
                    jj_consume_token( - 1 );
                    throw new ParseException();
                }
        }
    }

    final public void Literal() throws ParseException
    {
        switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
        {
            case IntegerLiteral:
            case DecimalLiteral:
            {
                NumericLiteral();
                break;
            }
            case StringLiteral:
            {
                jj_consume_token( StringLiteral );
                com.brentcroft.util.xpath.ast.StringLiteral jjtn001 = new StringLiteral( this, JJTSTRINGLITERAL );
                boolean jjtc001 = true;
                jjtree.openNodeScope( jjtn001 );
                try
                {
                    jjtree.closeNodeScope( jjtn001, true );
                    jjtc001 = false;
                    processToken( jjtn001, token );
                }
                finally
                {
                    if ( jjtc001 )
                    {
                        jjtree.closeNodeScope( jjtn001, true );
                    }
                }
                break;
            }
            default:
                jj_la1[ 30 ] = jj_gen;
                jj_consume_token( - 1 );
                throw new ParseException();
        }
    }

    final public void NumericLiteral() throws ParseException
    {
        switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
        {
            case IntegerLiteral:
            {
                jj_consume_token( IntegerLiteral );
                com.brentcroft.util.xpath.ast.IntegerLiteral jjtn001 = new IntegerLiteral( this, JJTINTEGERLITERAL );
                boolean jjtc001 = true;
                jjtree.openNodeScope( jjtn001 );
                try
                {
                    jjtree.closeNodeScope( jjtn001, true );
                    jjtc001 = false;
                    processToken( jjtn001, token );
                }
                finally
                {
                    if ( jjtc001 )
                    {
                        jjtree.closeNodeScope( jjtn001, true );
                    }
                }
                break;
            }
            case DecimalLiteral:
            {
                jj_consume_token( DecimalLiteral );
                com.brentcroft.util.xpath.ast.DecimalLiteral jjtn002 = new DecimalLiteral( this, JJTDECIMALLITERAL );
                boolean jjtc002 = true;
                jjtree.openNodeScope( jjtn002 );
                try
                {
                    jjtree.closeNodeScope( jjtn002, true );
                    jjtc002 = false;
                    processToken( jjtn002, token );
                }
                finally
                {
                    if ( jjtc002 )
                    {
                        jjtree.closeNodeScope( jjtn002, true );
                    }
                }
                break;
            }
            default:
                jj_la1[ 31 ] = jj_gen;
                jj_consume_token( - 1 );
                throw new ParseException();
        }
    }

    final public void VarRef() throws ParseException
    {
        jj_consume_token( 30 );
        VarName();
    }

    final public void VarName() throws ParseException
    {/*@bgen(jjtree) VarName */
        VarName jjtn000 = new VarName( this, JJTVARNAME );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            QName();
        }
        catch ( Throwable jjte000 )
        {
            if ( jjtc000 )
            {
                jjtree.clearNodeScope( jjtn000 );
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException )
            {
                {
                    if ( true )
                    {
                        throw ( RuntimeException ) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException )
            {
                {
                    if ( true )
                    {
                        throw ( ParseException ) jjte000;
                    }
                }
            }
            {
                if ( true )
                {
                    throw ( Error ) jjte000;
                }
            }
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, true );
            }
        }
    }

    final public void ParenthesizedExpr() throws ParseException
    {/*@bgen(jjtree) ParenthesizedExpr */
        ParenthesizedExpr jjtn000 = new ParenthesizedExpr( this, JJTPARENTHESIZEDEXPR );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            jj_consume_token( 31 );
            ExprSingle();
            jj_consume_token( 32 );
        }
        catch ( Throwable jjte000 )
        {
            if ( jjtc000 )
            {
                jjtree.clearNodeScope( jjtn000 );
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException )
            {
                {
                    if ( true )
                    {
                        throw ( RuntimeException ) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException )
            {
                {
                    if ( true )
                    {
                        throw ( ParseException ) jjte000;
                    }
                }
            }
            {
                if ( true )
                {
                    throw ( Error ) jjte000;
                }
            }
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, true );
            }
        }
    }

    final public void ContextItemExpr() throws ParseException
    {/*@bgen(jjtree) ContextItemExpr */
        ContextItemExpr jjtn000 = new ContextItemExpr( this, JJTCONTEXTITEMEXPR );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            jj_consume_token( 33 );
            jjtree.closeNodeScope( jjtn000, true );
            jjtc000 = false;
            jjtn000.processValue( "." );
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, true );
            }
        }
    }

    final public void FunctionCall() throws ParseException
    {/*@bgen(jjtree) FunctionCall */
        FunctionCall jjtn000 = new FunctionCall( this, JJTFUNCTIONCALL );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            FunctionQName();
            jj_consume_token( 31 );
            switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
            {
                case 1:
                case 2:
                case 8:
                case 9:
                case 10:
                case 12:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 30:
                case 31:
                case 33:
                case 35:
                case 36:
                case 37:
                case 38:
                case Slash:
                case SlashSlash:
                case Minus:
                case NCNameColonStar:
                case IntegerLiteral:
                case DecimalLiteral:
                case StringLiteral:
                case QNameToken:
                {
                    ExprSingle();
                    label_11:
                    while ( true )
                    {
                        switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
                        {
                            case 34:
                            {
                                ;
                                break;
                            }
                            default:
                                jj_la1[ 32 ] = jj_gen;
                                break label_11;
                        }
                        jj_consume_token( 34 );
                        ExprSingle();
                    }
                    break;
                }
                default:
                    jj_la1[ 33 ] = jj_gen;
                    ;
            }
            jj_consume_token( 32 );
        }
        catch ( Throwable jjte000 )
        {
            if ( jjtc000 )
            {
                jjtree.clearNodeScope( jjtn000 );
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException )
            {
                {
                    if ( true )
                    {
                        throw ( RuntimeException ) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException )
            {
                {
                    if ( true )
                    {
                        throw ( ParseException ) jjte000;
                    }
                }
            }
            {
                if ( true )
                {
                    throw ( Error ) jjte000;
                }
            }
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, true );
            }
        }
    }

    final public void KindTest() throws ParseException
    {
        switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
        {
            case 38:
            {
                PITest();
                break;
            }
            case 37:
            {
                CommentTest();
                break;
            }
            case 36:
            {
                TextTest();
                break;
            }
            case 35:
            {
                AnyKindTest();
                break;
            }
            default:
                jj_la1[ 34 ] = jj_gen;
                jj_consume_token( - 1 );
                throw new ParseException();
        }
    }

    final public void AnyKindTest() throws ParseException
    {/*@bgen(jjtree) AnyKindTest */
        AnyKindTest jjtn000 = new AnyKindTest( this, JJTANYKINDTEST );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            jj_consume_token( 35 );
            jj_consume_token( 31 );
            jj_consume_token( 32 );
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, true );
            }
        }
    }

    final public void TextTest() throws ParseException
    {/*@bgen(jjtree) TextTest */
        TextTest jjtn000 = new TextTest( this, JJTTEXTTEST );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            jj_consume_token( 36 );
            jj_consume_token( 31 );
            jj_consume_token( 32 );
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, true );
            }
        }
    }

    final public void CommentTest() throws ParseException
    {/*@bgen(jjtree) CommentTest */
        CommentTest jjtn000 = new CommentTest( this, JJTCOMMENTTEST );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            jj_consume_token( 37 );
            jj_consume_token( 31 );
            jj_consume_token( 32 );
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, true );
            }
        }
    }

    final public void PITest() throws ParseException
    {/*@bgen(jjtree) PITest */
        PITest jjtn000 = new PITest( this, JJTPITEST );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            jj_consume_token( 38 );
            jj_consume_token( 31 );
            switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
            {
                case StringLiteral:
                {
                    jj_consume_token( StringLiteral );
                    StringLiteral jjtn001 = new StringLiteral( this, JJTSTRINGLITERAL );
                    boolean jjtc001 = true;
                    jjtree.openNodeScope( jjtn001 );
                    try
                    {
                        jjtree.closeNodeScope( jjtn001, true );
                        jjtc001 = false;
                        processToken( jjtn001, token );
                    }
                    finally
                    {
                        if ( jjtc001 )
                        {
                            jjtree.closeNodeScope( jjtn001, true );
                        }
                    }
                    break;
                }
                default:
                    jj_la1[ 35 ] = jj_gen;
                    ;
            }
            jj_consume_token( 32 );
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, true );
            }
        }
    }

    final public void NCName() throws ParseException
    {/*@bgen(jjtree) NCName */
        NCName jjtn000 = new NCName( this, JJTNCNAME );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            QName();
        }
        catch ( Throwable jjte000 )
        {
            if ( jjtc000 )
            {
                jjtree.clearNodeScope( jjtn000 );
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException )
            {
                {
                    if ( true )
                    {
                        throw ( RuntimeException ) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException )
            {
                {
                    if ( true )
                    {
                        throw ( ParseException ) jjte000;
                    }
                }
            }
            {
                if ( true )
                {
                    throw ( Error ) jjte000;
                }
            }
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, true );
            }
        }
    }

    final public void QName() throws ParseException
    {/*@bgen(jjtree) QName */
        QName jjtn000 = new QName( this, JJTQNAME );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
            {
                case 1:
                case 2:
                case 9:
                case 10:
                case 12:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case QNameToken:
                {
                    FunctionQName();
                    break;
                }
                case 37:
                {
                    jj_consume_token( 37 );
                    jjtree.closeNodeScope( jjtn000, true );
                    jjtc000 = false;
                    jjtn000.processValue( "comment" );
                    break;
                }
                case 35:
                {
                    jj_consume_token( 35 );
                    jjtree.closeNodeScope( jjtn000, true );
                    jjtc000 = false;
                    jjtn000.processValue( "node" );
                    break;
                }
                case 38:
                {
                    jj_consume_token( 38 );
                    jjtree.closeNodeScope( jjtn000, true );
                    jjtc000 = false;
                    jjtn000.processValue( "processing-instruction" );
                    break;
                }
                case 36:
                {
                    jj_consume_token( 36 );
                    jjtree.closeNodeScope( jjtn000, true );
                    jjtc000 = false;
                    jjtn000.processValue( "text" );
                    break;
                }
                default:
                    jj_la1[ 36 ] = jj_gen;
                    jj_consume_token( - 1 );
                    throw new ParseException();
            }
        }
        catch ( Throwable jjte000 )
        {
            if ( jjtc000 )
            {
                jjtree.clearNodeScope( jjtn000 );
                jjtc000 = false;
            }
            else
            {
                jjtree.popNode();
            }
            if ( jjte000 instanceof RuntimeException )
            {
                {
                    if ( true )
                    {
                        throw ( RuntimeException ) jjte000;
                    }
                }
            }
            if ( jjte000 instanceof ParseException )
            {
                {
                    if ( true )
                    {
                        throw ( ParseException ) jjte000;
                    }
                }
            }
            {
                if ( true )
                {
                    throw ( Error ) jjte000;
                }
            }
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, true );
            }
        }
    }

    final public void FunctionQName() throws ParseException
    {/*@bgen(jjtree) FunctionQName */
        FunctionQName jjtn000 = new FunctionQName( this, JJTFUNCTIONQNAME );
        boolean jjtc000 = true;
        jjtree.openNodeScope( jjtn000 );
        try
        {
            switch ( ( jj_ntk == - 1 ) ? jj_ntk_f() : jj_ntk )
            {
                case QNameToken:
                {
                    jj_consume_token( QNameToken );
                    jjtree.closeNodeScope( jjtn000, true );
                    jjtc000 = false;
                    processToken( ( ( SimpleNode ) jjtree.peekNode() ), token );
                    break;
                }
                case 23:
                {
                    jj_consume_token( 23 );
                    jjtree.closeNodeScope( jjtn000, true );
                    jjtc000 = false;
                    jjtn000.processValue( "ancestor" );
                    break;
                }
                case 26:
                {
                    jj_consume_token( 26 );
                    jjtree.closeNodeScope( jjtn000, true );
                    jjtc000 = false;
                    jjtn000.processValue( "ancestor-or-self" );
                    break;
                }
                case 2:
                {
                    jj_consume_token( 2 );
                    jjtree.closeNodeScope( jjtn000, true );
                    jjtc000 = false;
                    jjtn000.processValue( "and" );
                    break;
                }
                case 15:
                {
                    jj_consume_token( 15 );
                    jjtree.closeNodeScope( jjtn000, true );
                    jjtc000 = false;
                    jjtn000.processValue( "attribute" );
                    break;
                }
                case 12:
                {
                    jj_consume_token( 12 );
                    jjtree.closeNodeScope( jjtn000, true );
                    jjtc000 = false;
                    jjtn000.processValue( "child" );
                    break;
                }
                case 14:
                {
                    jj_consume_token( 14 );
                    jjtree.closeNodeScope( jjtn000, true );
                    jjtc000 = false;
                    jjtn000.processValue( "descendant" );
                    break;
                }
                case 17:
                {
                    jj_consume_token( 17 );
                    jjtree.closeNodeScope( jjtn000, true );
                    jjtc000 = false;
                    jjtn000.processValue( "descendant-or-self" );
                    break;
                }
                case 9:
                {
                    jj_consume_token( 9 );
                    jjtree.closeNodeScope( jjtn000, true );
                    jjtc000 = false;
                    jjtn000.processValue( "div" );
                    break;
                }
                case 19:
                {
                    jj_consume_token( 19 );
                    jjtree.closeNodeScope( jjtn000, true );
                    jjtc000 = false;
                    jjtn000.processValue( "following" );
                    break;
                }
                case 18:
                {
                    jj_consume_token( 18 );
                    jjtree.closeNodeScope( jjtn000, true );
                    jjtc000 = false;
                    jjtn000.processValue( "following-sibling" );
                    break;
                }
                case 10:
                {
                    jj_consume_token( 10 );
                    jjtree.closeNodeScope( jjtn000, true );
                    jjtc000 = false;
                    jjtn000.processValue( "mod" );
                    break;
                }
                case 20:
                {
                    jj_consume_token( 20 );
                    jjtree.closeNodeScope( jjtn000, true );
                    jjtc000 = false;
                    jjtn000.processValue( "namespace" );
                    break;
                }
                case 1:
                {
                    jj_consume_token( 1 );
                    jjtree.closeNodeScope( jjtn000, true );
                    jjtc000 = false;
                    jjtn000.processValue( "or" );
                    break;
                }
                case 22:
                {
                    jj_consume_token( 22 );
                    jjtree.closeNodeScope( jjtn000, true );
                    jjtc000 = false;
                    jjtn000.processValue( "parent" );
                    break;
                }
                case 25:
                {
                    jj_consume_token( 25 );
                    jjtree.closeNodeScope( jjtn000, true );
                    jjtc000 = false;
                    jjtn000.processValue( "preceding" );
                    break;
                }
                case 24:
                {
                    jj_consume_token( 24 );
                    jjtree.closeNodeScope( jjtn000, true );
                    jjtc000 = false;
                    jjtn000.processValue( "preceding-sibling" );
                    break;
                }
                case 16:
                {
                    jj_consume_token( 16 );
                    jjtree.closeNodeScope( jjtn000, true );
                    jjtc000 = false;
                    jjtn000.processValue( "self" );
                    break;
                }
                default:
                    jj_la1[ 37 ] = jj_gen;
                    jj_consume_token( - 1 );
                    throw new ParseException();
            }
        }
        finally
        {
            if ( jjtc000 )
            {
                jjtree.closeNodeScope( jjtn000, true );
            }
        }
    }

    private boolean jj_2_1( int xla )
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return ! jj_3_1();
        }
        catch ( LookaheadSuccess ls )
        {
            return true;
        }
        finally
        {
            jj_save( 0, xla );
        }
    }

    private boolean jj_2_2( int xla )
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return ! jj_3_2();
        }
        catch ( LookaheadSuccess ls )
        {
            return true;
        }
        finally
        {
            jj_save( 1, xla );
        }
    }

    private boolean jj_2_3( int xla )
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return ! jj_3_3();
        }
        catch ( LookaheadSuccess ls )
        {
            return true;
        }
        finally
        {
            jj_save( 2, xla );
        }
    }

    private boolean jj_2_4( int xla )
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return ! jj_3_4();
        }
        catch ( LookaheadSuccess ls )
        {
            return true;
        }
        finally
        {
            jj_save( 3, xla );
        }
    }

    private boolean jj_2_5( int xla )
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return ! jj_3_5();
        }
        catch ( LookaheadSuccess ls )
        {
            return true;
        }
        finally
        {
            jj_save( 4, xla );
        }
    }

    private boolean jj_3R_25()
    {
        if ( jj_scan_token( 15 ) )
        {
            return true;
        }
        if ( jj_scan_token( 13 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_86()
    {
        if ( jj_3R_87() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_24()
    {
        if ( jj_scan_token( 14 ) )
        {
            return true;
        }
        if ( jj_scan_token( 13 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_49()
    {
        if ( jj_scan_token( QNameToken ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_84()
    {
        if ( jj_scan_token( 36 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_35()
    {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_49() )
        {
            jj_scanpos = xsp;
            if ( jj_3R_50() )
            {
                jj_scanpos = xsp;
                if ( jj_3R_51() )
                {
                    jj_scanpos = xsp;
                    if ( jj_3R_52() )
                    {
                        jj_scanpos = xsp;
                        if ( jj_3R_53() )
                        {
                            jj_scanpos = xsp;
                            if ( jj_3R_54() )
                            {
                                jj_scanpos = xsp;
                                if ( jj_3R_55() )
                                {
                                    jj_scanpos = xsp;
                                    if ( jj_3R_56() )
                                    {
                                        jj_scanpos = xsp;
                                        if ( jj_3R_57() )
                                        {
                                            jj_scanpos = xsp;
                                            if ( jj_3R_58() )
                                            {
                                                jj_scanpos = xsp;
                                                if ( jj_3R_59() )
                                                {
                                                    jj_scanpos = xsp;
                                                    if ( jj_3R_60() )
                                                    {
                                                        jj_scanpos = xsp;
                                                        if ( jj_3R_61() )
                                                        {
                                                            jj_scanpos = xsp;
                                                            if ( jj_3R_62() )
                                                            {
                                                                jj_scanpos = xsp;
                                                                if ( jj_3R_63() )
                                                                {
                                                                    jj_scanpos = xsp;
                                                                    if ( jj_3R_64() )
                                                                    {
                                                                        jj_scanpos = xsp;
                                                                        if ( jj_3R_65() )
                                                                        {
                                                                            jj_scanpos = xsp;
                                                                            if ( jj_3R_66() )
                                                                            {
                                                                                return true;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_83()
    {
        if ( jj_scan_token( 38 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_82()
    {
        if ( jj_scan_token( 35 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_81()
    {
        if ( jj_scan_token( 37 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_23()
    {
        if ( jj_scan_token( 12 ) )
        {
            return true;
        }
        if ( jj_scan_token( 13 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_109()
    {
        if ( jj_3R_110() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_15()
    {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_23() )
        {
            jj_scanpos = xsp;
            if ( jj_3R_24() )
            {
                jj_scanpos = xsp;
                if ( jj_3R_25() )
                {
                    jj_scanpos = xsp;
                    if ( jj_3R_26() )
                    {
                        jj_scanpos = xsp;
                        if ( jj_3R_27() )
                        {
                            jj_scanpos = xsp;
                            if ( jj_3R_28() )
                            {
                                jj_scanpos = xsp;
                                if ( jj_3R_29() )
                                {
                                    jj_scanpos = xsp;
                                    if ( jj_3R_30() )
                                    {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_80()
    {
        if ( jj_3R_35() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_76()
    {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_80() )
        {
            jj_scanpos = xsp;
            if ( jj_3R_81() )
            {
                jj_scanpos = xsp;
                if ( jj_3R_82() )
                {
                    jj_scanpos = xsp;
                    if ( jj_3R_83() )
                    {
                        jj_scanpos = xsp;
                        if ( jj_3R_84() )
                        {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_3()
    {
        if ( jj_3R_15() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_108()
    {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3_3() )
        {
            jj_scanpos = xsp;
            if ( jj_3R_109() )
            {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_107()
    {
        if ( jj_3R_108() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_85()
    {
        if ( jj_3R_86() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3_2()
    {
        if ( jj_3R_14() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_104()
    {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3_2() )
        {
            jj_scanpos = xsp;
            if ( jj_3R_107() )
            {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_103()
    {
        if ( jj_3R_106() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_102()
    {
        if ( jj_3R_105() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_45()
    {
        if ( jj_scan_token( 38 ) )
        {
            return true;
        }
        if ( jj_scan_token( 31 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_101()
    {
        if ( jj_3R_104() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_46()
    {
        if ( jj_scan_token( 37 ) )
        {
            return true;
        }
        if ( jj_scan_token( 31 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_100()
    {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_101() )
        {
            jj_scanpos = xsp;
            if ( jj_3R_102() )
            {
                jj_scanpos = xsp;
                if ( jj_3R_103() )
                {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_47()
    {
        if ( jj_scan_token( 36 ) )
        {
            return true;
        }
        if ( jj_scan_token( 31 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_99()
    {
        if ( jj_3R_100() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_98()
    {
        if ( jj_3R_99() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_97()
    {
        if ( jj_scan_token( SlashSlash ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_77()
    {
        if ( jj_3R_85() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_34()
    {
        if ( jj_3R_48() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_48()
    {
        if ( jj_scan_token( 35 ) )
        {
            return true;
        }
        if ( jj_scan_token( 31 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_33()
    {
        if ( jj_3R_47() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_32()
    {
        if ( jj_3R_46() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_96()
    {
        if ( jj_scan_token( Slash ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_95()
    {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_96() )
        {
            jj_scanpos = xsp;
            if ( jj_3R_97() )
            {
                jj_scanpos = xsp;
                if ( jj_3R_98() )
                {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_94()
    {
        if ( jj_3R_95() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_20()
    {
        if ( jj_scan_token( Slash ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_21()
    {
        if ( jj_scan_token( SlashSlash ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_13()
    {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_20() )
        {
            jj_scanpos = xsp;
            if ( jj_3R_21() )
            {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_31()
    {
        if ( jj_3R_45() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_16()
    {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_31() )
        {
            jj_scanpos = xsp;
            if ( jj_3R_32() )
            {
                jj_scanpos = xsp;
                if ( jj_3R_33() )
                {
                    jj_scanpos = xsp;
                    if ( jj_3R_34() )
                    {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_1()
    {
        if ( jj_3R_12() )
        {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_13() )
        {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_93()
    {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3_1() )
        {
            jj_scanpos = xsp;
            if ( jj_3R_94() )
            {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_74()
    {
        if ( jj_3R_77() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_17()
    {
        if ( jj_3R_35() )
        {
            return true;
        }
        if ( jj_scan_token( 31 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_105()
    {
        if ( jj_scan_token( 33 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_69()
    {
        if ( jj_scan_token( 31 ) )
        {
            return true;
        }
        if ( jj_3R_74() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_92()
    {
        if ( jj_3R_93() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_73()
    {
        if ( jj_3R_76() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_91()
    {
        if ( jj_scan_token( Minus ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_90()
    {
        Token xsp;
        while ( true )
        {
            xsp = jj_scanpos;
            if ( jj_3R_91() )
            {
                jj_scanpos = xsp;
                break;
            }
        }
        if ( jj_3R_92() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_79()
    {
        if ( jj_scan_token( DecimalLiteral ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_68()
    {
        if ( jj_scan_token( 30 ) )
        {
            return true;
        }
        if ( jj_3R_73() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_78()
    {
        if ( jj_scan_token( IntegerLiteral ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_72()
    {
        if ( jj_scan_token( StringLiteral ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_75()
    {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_78() )
        {
            jj_scanpos = xsp;
            if ( jj_3R_79() )
            {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_71()
    {
        if ( jj_3R_75() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3_5()
    {
        if ( jj_3R_17() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_67()
    {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_71() )
        {
            jj_scanpos = xsp;
            if ( jj_3R_72() )
            {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_38()
    {
        if ( jj_3R_69() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_37()
    {
        if ( jj_3R_68() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_36()
    {
        if ( jj_3R_67() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_18()
    {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_36() )
        {
            jj_scanpos = xsp;
            if ( jj_3R_37() )
            {
                jj_scanpos = xsp;
                if ( jj_3R_38() )
                {
                    jj_scanpos = xsp;
                    if ( jj_3_5() )
                    {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_89()
    {
        if ( jj_3R_90() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_70()
    {
        if ( jj_scan_token( 28 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_39()
    {
        if ( jj_3R_70() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_19()
    {
        Token xsp;
        while ( true )
        {
            xsp = jj_scanpos;
            if ( jj_3R_39() )
            {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_119()
    {
        if ( jj_scan_token( NCNameColonStar ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_12()
    {
        if ( jj_3R_18() )
        {
            return true;
        }
        if ( jj_3R_19() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_118()
    {
        if ( jj_scan_token( 8 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_117()
    {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_118() )
        {
            jj_scanpos = xsp;
            if ( jj_3R_119() )
            {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_116()
    {
        if ( jj_3R_117() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_88()
    {
        if ( jj_3R_89() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_115()
    {
        if ( jj_3R_76() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_114()
    {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_115() )
        {
            jj_scanpos = xsp;
            if ( jj_3R_116() )
            {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_113()
    {
        if ( jj_3R_114() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3_4()
    {
        if ( jj_3R_16() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_112()
    {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3_4() )
        {
            jj_scanpos = xsp;
            if ( jj_3R_113() )
            {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_106()
    {
        if ( jj_scan_token( 27 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_44()
    {
        if ( jj_scan_token( 26 ) )
        {
            return true;
        }
        if ( jj_scan_token( 13 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_43()
    {
        if ( jj_scan_token( 25 ) )
        {
            return true;
        }
        if ( jj_scan_token( 13 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_42()
    {
        if ( jj_scan_token( 24 ) )
        {
            return true;
        }
        if ( jj_scan_token( 13 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_41()
    {
        if ( jj_scan_token( 23 ) )
        {
            return true;
        }
        if ( jj_scan_token( 13 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_40()
    {
        if ( jj_scan_token( 22 ) )
        {
            return true;
        }
        if ( jj_scan_token( 13 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_22()
    {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_40() )
        {
            jj_scanpos = xsp;
            if ( jj_3R_41() )
            {
                jj_scanpos = xsp;
                if ( jj_3R_42() )
                {
                    jj_scanpos = xsp;
                    if ( jj_3R_43() )
                    {
                        jj_scanpos = xsp;
                        if ( jj_3R_44() )
                        {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_87()
    {
        if ( jj_3R_88() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_66()
    {
        if ( jj_scan_token( 16 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_14()
    {
        if ( jj_3R_22() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_65()
    {
        if ( jj_scan_token( 24 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_64()
    {
        if ( jj_scan_token( 25 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_63()
    {
        if ( jj_scan_token( 22 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_62()
    {
        if ( jj_scan_token( 1 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_61()
    {
        if ( jj_scan_token( 20 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_60()
    {
        if ( jj_scan_token( 10 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_111()
    {
        if ( jj_scan_token( 21 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_59()
    {
        if ( jj_scan_token( 18 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_110()
    {
        Token xsp;
        xsp = jj_scanpos;
        if ( jj_3R_111() )
        {
            jj_scanpos = xsp;
        }
        if ( jj_3R_112() )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_30()
    {
        if ( jj_scan_token( 20 ) )
        {
            return true;
        }
        if ( jj_scan_token( 13 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_58()
    {
        if ( jj_scan_token( 19 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_57()
    {
        if ( jj_scan_token( 9 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_29()
    {
        if ( jj_scan_token( 19 ) )
        {
            return true;
        }
        if ( jj_scan_token( 13 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_56()
    {
        if ( jj_scan_token( 17 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_55()
    {
        if ( jj_scan_token( 14 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_28()
    {
        if ( jj_scan_token( 18 ) )
        {
            return true;
        }
        if ( jj_scan_token( 13 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_54()
    {
        if ( jj_scan_token( 12 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_53()
    {
        if ( jj_scan_token( 15 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_27()
    {
        if ( jj_scan_token( 17 ) )
        {
            return true;
        }
        if ( jj_scan_token( 13 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_52()
    {
        if ( jj_scan_token( 2 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_51()
    {
        if ( jj_scan_token( 26 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_26()
    {
        if ( jj_scan_token( 16 ) )
        {
            return true;
        }
        if ( jj_scan_token( 13 ) )
        {
            return true;
        }
        return false;
    }

    private boolean jj_3R_50()
    {
        if ( jj_scan_token( 23 ) )
        {
            return true;
        }
        return false;
    }

    /**
     * Generated Token Manager.
     */
    public XParserTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[ 38 ];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;

    static
    {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
    }

    private static void jj_la1_init_0()
    {
        jj_la1_0 = new int[]{ 0x2, 0x4, 0x18, 0x18, 0xe0, 0xe0, 0x0, 0x0, 0x700, 0x700, 0x0, 0x800, 0x0, 0x0, 0xfffd706, 0xfffd706, 0xfffd706, 0x0, 0x0, 0xfffd706, 0x7ffd706, 0x7ffd706, 0x1fd000, 0x200000, 0x7c00000, 0x7dfd706, 0x7dfd706, 0x100, 0x10000000, 0xc0000000, 0x0, 0x0, 0x0, 0xcfffd706, 0x0, 0x0, 0x7dfd606, 0x7dfd606, };
    }

    private static void jj_la1_init_1()
    {
        jj_la1_1 = new int[]{ 0x0, 0x0, 0x0, 0x0, 0x400, 0x400, 0x1800, 0x1800, 0x0, 0x0, 0x1000, 0x0, 0x300, 0x300, 0x2237a, 0x2207a, 0x2237a, 0x300, 0x300, 0x2207a, 0x22078, 0x22078, 0x0, 0x0, 0x0, 0x22078, 0x22078, 0x2000, 0x0, 0x1c000, 0x1c000, 0xc000, 0x4, 0x3f37a, 0x78, 0x10000, 0x20078, 0x20000, };
    }

    private static void jj_la1_init_2()
    {
        jj_la1_2 = new int[]{ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };
    }

    final private JJCalls[] jj_2_rtns = new JJCalls[ 5 ];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /**
     * Constructor with InputStream.
     */
    public XParser( java.io.InputStream stream )
    {
        this( stream, null );
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public XParser( java.io.InputStream stream, String encoding )
    {
        try
        {
            jj_input_stream = new SimpleCharStream( stream, encoding, 1, 1 );
        }
        catch ( java.io.UnsupportedEncodingException e )
        {
            throw new RuntimeException( e );
        }
        token_source = new XParserTokenManager( jj_input_stream );
        token = new Token();
        jj_ntk = - 1;
        jj_gen = 0;
        for ( int i = 0; i < 38; i++ )
        {
            jj_la1[ i ] = - 1;
        }
        for ( int i = 0; i < jj_2_rtns.length; i++ )
        {
            jj_2_rtns[ i ] = new JJCalls();
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit( java.io.InputStream stream )
    {
        ReInit( stream, null );
    }

    /**
     * Reinitialise.
     */
    public void ReInit( java.io.InputStream stream, String encoding )
    {
        try
        {
            jj_input_stream.ReInit( stream, encoding, 1, 1 );
        }
        catch ( java.io.UnsupportedEncodingException e )
        {
            throw new RuntimeException( e );
        }
        token_source.ReInit( jj_input_stream );
        token = new Token();
        jj_ntk = - 1;
        jjtree.reset();
        jj_gen = 0;
        for ( int i = 0; i < 38; i++ )
        {
            jj_la1[ i ] = - 1;
        }
        for ( int i = 0; i < jj_2_rtns.length; i++ )
        {
            jj_2_rtns[ i ] = new JJCalls();
        }
    }

    /**
     * Constructor.
     */
    public XParser( java.io.Reader stream )
    {
        jj_input_stream = new SimpleCharStream( stream, 1, 1 );
        token_source = new XParserTokenManager( jj_input_stream );
        token = new Token();
        jj_ntk = - 1;
        jj_gen = 0;
        for ( int i = 0; i < 38; i++ )
        {
            jj_la1[ i ] = - 1;
        }
        for ( int i = 0; i < jj_2_rtns.length; i++ )
        {
            jj_2_rtns[ i ] = new JJCalls();
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit( java.io.Reader stream )
    {
        jj_input_stream.ReInit( stream, 1, 1 );
        token_source.ReInit( jj_input_stream );
        token = new Token();
        jj_ntk = - 1;
        jjtree.reset();
        jj_gen = 0;
        for ( int i = 0; i < 38; i++ )
        {
            jj_la1[ i ] = - 1;
        }
        for ( int i = 0; i < jj_2_rtns.length; i++ )
        {
            jj_2_rtns[ i ] = new JJCalls();
        }
    }

    /**
     * Constructor with generated Token Manager.
     */
    public XParser( XParserTokenManager tm )
    {
        token_source = tm;
        token = new Token();
        jj_ntk = - 1;
        jj_gen = 0;
        for ( int i = 0; i < 38; i++ )
        {
            jj_la1[ i ] = - 1;
        }
        for ( int i = 0; i < jj_2_rtns.length; i++ )
        {
            jj_2_rtns[ i ] = new JJCalls();
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit( XParserTokenManager tm )
    {
        token_source = tm;
        token = new Token();
        jj_ntk = - 1;
        jjtree.reset();
        jj_gen = 0;
        for ( int i = 0; i < 38; i++ )
        {
            jj_la1[ i ] = - 1;
        }
        for ( int i = 0; i < jj_2_rtns.length; i++ )
        {
            jj_2_rtns[ i ] = new JJCalls();
        }
    }

    private Token jj_consume_token( int kind ) throws ParseException
    {
        Token oldToken;
        if ( ( oldToken = token ).next != null )
        {
            token = token.next;
        }
        else
        {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = - 1;
        if ( token.kind == kind )
        {
            jj_gen++;
            if ( ++ jj_gc > 100 )
            {
                jj_gc = 0;
                for ( int i = 0; i < jj_2_rtns.length; i++ )
                {
                    JJCalls c = jj_2_rtns[ i ];
                    while ( c != null )
                    {
                        if ( c.gen < jj_gen )
                        {
                            c.first = null;
                        }
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    @SuppressWarnings( "serial" )
    static private final class LookaheadSuccess extends java.lang.Error
    {
    }

    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    private boolean jj_scan_token( int kind )
    {
        if ( jj_scanpos == jj_lastpos )
        {
            jj_la--;
            if ( jj_scanpos.next == null )
            {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            }
            else
            {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        }
        else
        {
            jj_scanpos = jj_scanpos.next;
        }
        if ( jj_rescan )
        {
            int i = 0;
            Token tok = token;
            while ( tok != null && tok != jj_scanpos )
            {
                i++;
                tok = tok.next;
            }
            if ( tok != null )
            {
                jj_add_error_token( kind, i );
            }
        }
        if ( jj_scanpos.kind != kind )
        {
            return true;
        }
        if ( jj_la == 0 && jj_scanpos == jj_lastpos )
        {
            throw jj_ls;
        }
        return false;
    }


    /**
     * Get the next Token.
     */
    final public Token getNextToken()
    {
        if ( token.next != null )
        {
            token = token.next;
        }
        else
        {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = - 1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    final public Token getToken( int index )
    {
        Token t = token;
        for ( int i = 0; i < index; i++ )
        {
            if ( t.next != null )
            {
                t = t.next;
            }
            else
            {
                t = t.next = token_source.getNextToken();
            }
        }
        return t;
    }

    private int jj_ntk_f()
    {
        if ( ( jj_nt = token.next ) == null )
        {
            return ( jj_ntk = ( token.next = token_source.getNextToken() ).kind );
        }
        else
        {
            return ( jj_ntk = jj_nt.kind );
        }
    }

    private List< int[] > jj_expentries = new ArrayList< int[] >();
    private int[] jj_expentry;
    private int jj_kind = - 1;
    private int[] jj_lasttokens = new int[ 100 ];
    private int jj_endpos;

    private void jj_add_error_token( int kind, int pos )
    {
        if ( pos >= 100 )
        {
            return;
        }
        if ( pos == jj_endpos + 1 )
        {
            jj_lasttokens[ jj_endpos++ ] = kind;
        }
        else if ( jj_endpos != 0 )
        {
            jj_expentry = new int[ jj_endpos ];
            for ( int i = 0; i < jj_endpos; i++ )
            {
                jj_expentry[ i ] = jj_lasttokens[ i ];
            }
            jj_entries_loop:
            for ( Iterator< ? > it = jj_expentries.iterator(); it.hasNext(); )
            {
                int[] oldentry = ( int[] ) ( it.next() );
                if ( oldentry.length == jj_expentry.length )
                {
                    for ( int i = 0; i < jj_expentry.length; i++ )
                    {
                        if ( oldentry[ i ] != jj_expentry[ i ] )
                        {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add( jj_expentry );
                    break jj_entries_loop;
                }
            }
            if ( pos != 0 )
            {
                jj_lasttokens[ ( jj_endpos = pos ) - 1 ] = kind;
            }
        }
    }

    /**
     * Generate ParseException.
     */
    public ParseException generateParseException()
    {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[ 67 ];
        if ( jj_kind >= 0 )
        {
            la1tokens[ jj_kind ] = true;
            jj_kind = - 1;
        }
        for ( int i = 0; i < 38; i++ )
        {
            if ( jj_la1[ i ] == jj_gen )
            {
                for ( int j = 0; j < 32; j++ )
                {
                    if ( ( jj_la1_0[ i ] & ( 1 << j ) ) != 0 )
                    {
                        la1tokens[ j ] = true;
                    }
                    if ( ( jj_la1_1[ i ] & ( 1 << j ) ) != 0 )
                    {
                        la1tokens[ 32 + j ] = true;
                    }
                    if ( ( jj_la1_2[ i ] & ( 1 << j ) ) != 0 )
                    {
                        la1tokens[ 64 + j ] = true;
                    }
                }
            }
        }
        for ( int i = 0; i < 67; i++ )
        {
            if ( la1tokens[ i ] )
            {
                jj_expentry = new int[ 1 ];
                jj_expentry[ 0 ] = i;
                jj_expentries.add( jj_expentry );
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token( 0, 0 );
        int[][] exptokseq = new int[ jj_expentries.size() ][];
        for ( int i = 0; i < jj_expentries.size(); i++ )
        {
            exptokseq[ i ] = jj_expentries.get( i );
        }
        return new ParseException( token, exptokseq, tokenImage );
    }

    /**
     * Enable tracing.
     */
    final public void enable_tracing()
    {
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing()
    {
    }

    private void jj_rescan_token()
    {
        jj_rescan = true;
        for ( int i = 0; i < 5; i++ )
        {
            try
            {
                JJCalls p = jj_2_rtns[ i ];
                do
                {
                    if ( p.gen > jj_gen )
                    {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch ( i )
                        {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                            case 3:
                                jj_3_4();
                                break;
                            case 4:
                                jj_3_5();
                                break;
                        }
                    }
                    p = p.next;
                }
                while ( p != null );
            }
            catch ( LookaheadSuccess ls )
            {
            }
        }
        jj_rescan = false;
    }

    private void jj_save( int index, int xla )
    {
        JJCalls p = jj_2_rtns[ index ];
        while ( p.gen > jj_gen )
        {
            if ( p.next == null )
            {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls
    {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
